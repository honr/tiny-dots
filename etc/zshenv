# On linux: "linux", on Mac OS X: "darwin".
UNAME="$(uname)"
case "$UNAME" in
  Linux) UNAME=linux ;;
  Darwin) UNAME=darwin ;;
esac

export PATH="$HOME/.local/bin/$UNAME:$HOME/.local/bin:$HOME/.opt/bin:$PATH"
export GOPATH="$HOME/.local"

# Find the value corresponding to a key in a string->string table or return an
# empty string and a non-zero exit value.
# Lines in file should look like:
# KEY VALUE
# ANOTHER-KEY ITS VALUE
# The first space is the delimeter.
function lookup_in_string_table() {
  local file="$1"
  local key="$2"
  [[ -e "$file" ]] || return 1
  local value="$(grep -m 1 -e "^$key " "$file")"
  [[ -n "$value" ]] || return 2
  echo "${value/#$key /}"
}

# Convenience command for tmux project management.
# When creating a session, the initial directory is looked up in ~/.tmux/DIRS.
# Then the project-specific script at ~/.tmux/$STY is sourced if existing.
tt() {
  if [[ -z "$1" ]] ; then
      tmux list-sessions
      return
  fi
  export STY="$1"
  local dir="$(lookup_in_string_table $HOME/.tmux/DIRS "$STY")"
  if [[ -z "$dir" ]] ; then
      if [[ "${STY[1]}" =~ [A-Z] ]] ; then
          dir="$(lookup_in_string_table $HOME/.tmux/DIRS DEFAULT_UPPER)"
      else
        dir="$(lookup_in_string_table $HOME/.tmux/DIRS DEFAULT_LOWER)"
      fi
  fi
  dir="${(e)dir:-$HOME}" # Do a parameter expansion or use $HOME if empty.
  echo "Session dir: $dir" >/dev/stderr
  if tmux new -d -s "$STY" -c "$dir" ; then
      [[ -e "$HOME/.tmux/$STY" ]] && source "$HOME/.tmux/$STY"
  fi
  tmux attach -t "$STY"
  unset "$STY"
}

source "$HOME/Pool/site/etc/zshenv-site" 2>/dev/null
source "$HOME/Pool/host/etc/zshenv-host" 2>/dev/null
